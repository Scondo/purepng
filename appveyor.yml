environment:
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_env.cmd"

  matrix:

    # Pre-installed Python versions, which Appveyor may upgrade to
    # a later point release.

    - PYTHON: "C:\\Python27-x64"
      PYTHON_VERSION: "2.7.x" # currently 2.7.9
      PYTHON_ARCH: "64"

    # Also test a Python version not pre-installed
    # See: https://github.com/ogrisel/python-appveyor-demo/issues/10

    - PYTHON: "C:\\Python266"
      PYTHON_VERSION: "2.6.6"
      PYTHON_ARCH: "32"

    - PYTHON: "C:\\Python254"
      PYTHON_VERSION: "2.5.4"
      PYTHON_ARCH: "32"

    - PYTHON: "C:\\Python244"
      PYTHON_VERSION: "2.4.4"
      PYTHON_ARCH: "32"

install:
  #- ECHO "Filesystem root:"
  #- ps: "ls \"C:/\""

  #- ECHO "Installed SDKs:"
  #- ps: "ls \"C:/Program Files/Microsoft SDKs/Windows\""

  # Install Python (from the official .msi of http://python.org) and pip when
  # not already installed.
  - ps: if (-not(Test-Path($env:PYTHON))) { & appveyor\install.ps1 }

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"

  # Check that we have the expected version and architecture for Python
  - "python -c \"import sys; print(sys.version)"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  # Install the build dependencies of the project. If some dependencies contain
  # compiled extensions and are not provided as pre-built wheel packages,
  # pip will build them from source using the MSVC compiler matching the
  # target Python version and architecture
  - "%CMD_IN_ENV% easy_install nose"
#  - "%CMD_IN_ENV% easy_install PIL"
  - "%CMD_IN_ENV% pip install coverage"
  - "%CMD_IN_ENV% pip install coveralls"

  # Not a C# project, build stuff at the test step instead.
build: false  

test_script:
  # run the project tests
  - "SET COVERALLS_PARALLEL=true"
  - "%CMD_IN_ENV% nosetests code/test_png.py"

after_test:
  # If tests are successful, update coverage.
  - "SET COVERALLS_REPO_TOKEN=w8NKB65QmekU0thmQV1E5yEaFpYIyUAYP"
  - "%CMD_IN_ENV% coveralls"
  - ps: "ls dist"
  
notifications:

  - provider: Webhook
    url: https://coveralls.io/webhook?repo_token=w8NKB65QmekU0thmQV1E5yEaFpYIyUAYP
    method: GET
#artifacts:
#  # Archive the generated wheel package in the ci.appveyor.com build report.
#  - path: dist\*

#on_success:
#  - TODO: upload the content of dist/*.whl to a public wheelhouse
#
